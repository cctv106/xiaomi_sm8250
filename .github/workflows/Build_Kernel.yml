name: Kernel Builder

on:
  workflow_dispatch:
    inputs:
      target_devices:
        description: 'Target device(s)'
        required: true
        default: 'munch'
        type: choice
        options:
          - 'munch'
          - 'lmi'
          - 'umi'
          - 'psyche'
          - 'thyme'
          - 'cmi'
          - 'cas'
          - 'apollo'
          - 'alioth'
          - 'elish'
          - 'enuma'
          - 'dagu'
          - 'pipa'
          - 'all'

      system_version:
        description: 'Target System'
        required: true
        type: choice
        default: 'miui'
        options:
          - 'aosp'
          - 'miui'
          - 'all'

      kernelsu_version:
        description: 'KernelSU Version'
        required: true
        type: choice
        default: 'ksu'
        options:
          - 'ksu'
          - 'rksu'
          - 'sukisu'
          - 'sukisu-ultra'
          - 'noksu'

      additional_function:
        description: 'Additional Functions'
        required: true
        type: choice
        default: 'no'
        options:
          - 'susfs'
          - 'kpm'
          - 'susfs-kpm'
          - 'no'
          
      kernelsu_meta:
        description: 'Branch/Custom tag for sukisu-ultra'
        required: false
        default: 'susfs-main/Numbersf'
        type: string

permissions:
  contents: write
  actions: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - id: set-matrix
        run: |
          DEVICES="${{ github.event.inputs.target_devices }}"
          if [ "$DEVICES" == "all" ]; then
            DEVICES="munch,lmi,umi,psyche,thyme,cmi,cas,apollo,alioth,elish,enuma,dagu,pipa"
          fi
          DEVICES_JSON="[\"$(echo $DEVICES | sed 's/,/\",\"/g')\"]"
          echo "matrix={\"device\":$DEVICES_JSON}" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}
      fail-fast: false
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      CCACHE_MAXSIZE: 8G
      CCACHE_DIR: ~/.ccache/${{ matrix.device }}

    steps:
      - name: Check Disk Space
        run: df -h

      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Create Swap
        run: |
          sudo swapoff -a
          sudo fallocate -l 3G /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          free -h

      - name: Configure APT Cache
        run: |
          APT_CACHE_DIR="$HOME/apt-cache"
          mkdir -p "$APT_CACHE_DIR"/{archives,lists/partial}
          echo "Dir::Cache \"$APT_CACHE_DIR\";" | sudo tee /etc/apt/apt.conf.d/90user-cache
          echo "Dir::Cache::archives \"$APT_CACHE_DIR/archives\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Dir::State::lists \"$APT_CACHE_DIR/lists\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Check-Valid-Until \"false\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          echo "Acquire::Languages \"none\";" | sudo tee -a /etc/apt/apt.conf.d/90user-cache
          sudo chown -R $USER:$USER "$APT_CACHE_DIR"

      - name: Cache APT
        uses: actions/cache@v4
        with:
          path: ${{ env.HOME }}/apt-cache
          key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/kernel_builder.yml') }}
          restore-keys: |
            ${{ runner.os }}-apt-

      - name: Set ccache
        run: |
          echo "CCACHE_DIR=$HOME/.ccache/${{ matrix.device }}" >> $GITHUB_ENV
          mkdir -p "$HOME/.ccache/${{ matrix.device }}"
          echo "CCACHE setup for ${{ matrix.device }}"

      - name: Restore ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ runner.os }}-${{ matrix.device }}-${{ github.sha }}
          restore-keys: ccache-${{ runner.os }}-${{ matrix.device }}-

      - name: Initialize ccache
        run: |
          if command -v ccache >/dev/null; then
            ccache -M $CCACHE_MAXSIZE
            ccache -s
          else
            echo "ccache not installed, skipping initialization"
          fi

      - name: Install Dependencies
        run: |
          sudo rm -f /var/lib/apt/lists/lock /var/lib/dpkg/lock
          sudo apt -o Dir::Cache="$HOME/apt-cache" update -qq
          sudo DEBIAN_FRONTEND=noninteractive apt -o Dir::Cache="$HOME/apt-cache" install -yq --no-install-recommends \
            build-essential git curl wget bison flex zip bc cpio libssl-dev libncurses-dev gcc python3 python3-pip ccache

      - uses: actions/checkout@v4
      
      - name: Clean workspace
        run: |
          rm -rf out/ AnyKernel3*.zip Kernel_*.zip
          ccache -C
          rm -rf *.o *.mod *.order *.symvers *.cmd
          rm -rf toolchain/proton-clang
          echo "Cleaned workspace"

      - name: Cache Toolchain
        uses: actions/cache@v4
        id: clang-cache
        with:
          path: toolchain/proton-clang
          key: ${{ runner.os }}-proton-clang-20210522

      - name: Download Toolchain
        if: steps.clang-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p toolchain
          cd toolchain
          wget -q https://github.com/kdrag0n/proton-clang/archive/refs/tags/20210522.zip
          unzip -q 20210522.zip
          mv proton-clang-20210522 proton-clang
          rm proton-clang/bin/ld 20210522.zip
          
      - name: Set up SukiSU Ultra
        if: ${{ github.event.inputs.kernelsu_version == 'sukisu-ultra' }}
        run: |
          META="${{ github.event.inputs.kernelsu_meta }}"
          BRANCH_NAME="${META%%/*}"
          CUSTOM_TAG="${META#*/}"
          echo "Branch: $BRANCH_NAME"
          echo "Custom tag: $CUSTOM_TAG"

          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s "$BRANCH_NAME"
          cd ./KernelSU

          KSU_API_VERSION=$(curl -fsSL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/Makefile" | 
            awk -F':=' '/KSU_VERSION_API[[:space:]]:=/{print $2}' | tr -d '[:space:]' || true)
          
          if [[ -z "$KSU_API_VERSION" ]]; then
            KSU_API_VERSION="3.1.8"
          fi
          
          if [[ ! "$KSU_API_VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            KSU_API_VERSION="3.1.8"
          fi
          
          echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV

          if [[ -z "$CUSTOM_TAG" || "$CUSTOM_TAG" == "$BRANCH_NAME" ]]; then
            VERSION_FULL="v${KSU_API_VERSION}@${BRANCH_NAME}"
          else
            VERSION_FULL="v${KSU_API_VERSION}-${CUSTOM_TAG}@${BRANCH_NAME}"
          fi

          sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
          sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
          sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile
          
          awk -v version_full="$VERSION_FULL" -v api_version="$KSU_API_VERSION" '
            /REPO_OWNER :=/ {
                print $0
                print "define get_ksu_version_full"
                print version_full
                print "endef"
                print ""
                print "KSU_VERSION_API := " api_version
                print "KSU_VERSION_FULL := " version_full
                inserted=1
                next
            }
            1
            END {
                if (!inserted) {
                    print "define get_ksu_version_full"
                    print version_full
                    print "endef"
                    print ""
                    print "KSU_VERSION_API := " api_version
                    print "KSU_VERSION_FULL := " version_full
                }
            }
          ' kernel/Makefile > kernel/Makefile.tmp && mv kernel/Makefile.tmp kernel/Makefile

          MAIN_COUNT=$(git rev-list --count main 2>/dev/null || echo "13000")
          KSU_VERSION=$(($MAIN_COUNT + 10700))
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV

          grep -A10 "REPO_OWNER" kernel/Makefile
          
          cd ..

      - name: Build Kernel
        run: |
          chmod +x build.sh
          sed -i "s|TOOLCHAIN_PATH=\$HOME/toolchain/proton-clang/bin|TOOLCHAIN_PATH=$(pwd)/toolchain/proton-clang/bin|" build.sh
          bash build.sh "${{ matrix.device }}" \
            "${{ github.event.inputs.kernelsu_version }}" \
            "${{ github.event.inputs.additional_function }}" \
            "${{ github.event.inputs.system_version }}" \
            "${{ env.KSU_API_VERSION }}"
          ccache -s

      - name: Map Device Name
        id: device_mapping
        run: |
          declare -A device_map=(
            ["psyche"]="Mi12X" ["thyme"]="Mi10S" ["umi"]="Mi10" ["munch"]="K40S"
            ["lmi"]="K30Pro" ["cmi"]="Mi10Pro" ["cas"]="Mi10Ultra" ["apollo"]="Mi10T-K30SUltra"
            ["alioth"]="Mi11X-K40" ["elish"]="XiaomiPad5Pro" ["enuma"]="XiaomiPad5Pro5G"
            ["dagu"]="XiaomiPad5Pro12.4" ["pipa"]="XiaomiPad6"
          )
          DEVICE="${{ matrix.device }}"
          DEVICE_NAME="${device_map[$DEVICE]}"
          
          if [ -z "$DEVICE_NAME" ]; then
            echo "::error::No device name mapping for $DEVICE"
            exit 1
          fi
          
          echo "device_name=$DEVICE_NAME" >> $GITHUB_OUTPUT
          echo "DEVICE_NAME=$DEVICE_NAME" >> $GITHUB_ENV

      - name: Rename Artifact
        run: |
          ZIP_FILE=$(find . -name "Kernel_*_${{ matrix.device }}_*.zip" -print -quit)
          if [ -z "$ZIP_FILE" ]; then
            ZIP_FILE=$(find . -name "AnyKernel3_${{ matrix.device }}*.zip" -print -quit)
          fi
          if [ -z "$ZIP_FILE" ]; then
            echo "::error::No kernel file found for ${{ matrix.device }}!"
            exit 1
          fi
          DEVICE_NAME="${{ env.DEVICE_NAME }}"
          NEW_NAME="AnyKernel3-$DEVICE_NAME.zip"
          mv "$ZIP_FILE" "$NEW_NAME"
          echo "ZIP_PATH=$(pwd)/$NEW_NAME" >> $GITHUB_ENV

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.DEVICE_NAME }}
          path: ${{ env.ZIP_PATH }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Prepare Release
        run: |
          mkdir -p release
          find artifacts -name '*.zip' -exec cp {} release \;
          
      - name: Set Release Info
        id: release_info
        run: |
          DEVICE_NAMES=$(ls release | cut -d'-' -f1 | sort -u | tr '\n' ',' | sed 's/,$//')
          echo "device_names=$DEVICE_NAMES" >> $GITHUB_OUTPUT
          
          RELEASE_BODY="## Kernel Build
          - **Devices:** $DEVICE_NAMES
          - **System:** ${{ github.event.inputs.system_version }}
          - **KernelSU:** ${{ github.event.inputs.kernelsu_version }}
          - **Build Date:** $(date +%Y-%m-%d)"
          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_BODY" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: AnyKernel3_${{ steps.release_info.outputs.device_names }}
          tag_name: kernel-${{ github.run_id }}
          body: ${{ env.RELEASE_BODY }}
          files: release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Cleanup
        if: ${{ always() }}
        run: rm -rf artifacts release
