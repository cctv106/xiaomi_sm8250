name: Kernel Builder

on:
  workflow_dispatch:
    inputs:
      target_devices:
        description: 'Target device(s)'
        required: true
        default: 'munch'
        type: choice
        options:
          - 'munch'
          - 'lmi'
          - 'umi'
          - 'psyche'
          - 'thyme'
          - 'cmi'
          - 'cas'
          - 'apollo'
          - 'alioth'
          - 'elish'
          - 'enuma'
          - 'dagu'
          - 'pipa'
          - 'all'

      system_version:
        description: 'Target System'
        required: true
        type: choice
        default: 'miui'
        options:
          - 'aosp'
          - 'miui'
          - 'all'

      kernelsu_version:
        description: 'KernelSU Version'
        required: true
        type: choice
        default: 'ksu'
        options:
          - 'ksu'
          - 'rksu'
          - 'sukisu'
          - 'sukisu-ultra'
          - 'noksu'

      additional_function:
        description: 'Additional Functions'
        required: true
        type: choice
        default: 'no'
        options:
          - 'susfs'
          - 'kpm'
          - 'susfs-kpm'
          - 'no'

      KSU_META:
        type: string
        description: "分支名/自定义版本标识"
        required: false
        default: "susfs-main/Numbersf"
        
  # 添加定时构建触发器
  schedule:
  - cron: '0 0,12 * * *'  # 每天北京时间0点和12点各运行一次

permissions:
  contents: write
  actions: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      # 添加输出以传递定时构建参数
      build_params: ${{ steps.set-build-params.outputs.build_params }}
    steps:
      # 设置定时构建的默认参数
      - name: Set build parameters for scheduled runs
        id: set-build-params
        if: ${{ github.event_name == 'schedule' }}
        run: |
          echo "target_devices=all" >> $GITHUB_OUTPUT
          echo "system_version=miui" >> $GITHUB_OUTPUT
          echo "kernelsu_version=sukisu-ultra" >> $GITHUB_OUTPUT
          echo "additional_function=susfs-kpm" >> $GITHUB_OUTPUT
          echo "KSU_META=susfs-main/酷安@宝明v" >> $GITHUB_OUTPUT
          echo "build_params=true" >> $GITHUB_OUTPUT
          
      # 为手动触发设置参数
      - name: Set parameters for manual runs
        id: set-manual-params
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |
          echo "target_devices=${{ github.event.inputs.target_devices || 'munch' }}" >> $GITHUB_OUTPUT
          echo "system_version=${{ github.event.inputs.system_version || 'miui' }}" >> $GITHUB_OUTPUT
          echo "kernelsu_version=${{ github.event.inputs.kernelsu_version || 'ksu' }}" >> $GITHUB_OUTPUT
          echo "additional_function=${{ github.event.inputs.additional_function || 'no' }}" >> $GITHUB_OUTPUT
          echo "KSU_META=${{ github.event.inputs.KSU_META || 'susfs-main/Numbersf' }}" >> $GITHUB_OUTPUT
          echo "build_params=true" >> $GITHUB_OUTPUT

      # 设置设备矩阵
      - id: set-matrix
        run: |
          # 使用前面步骤设置的参数
          DEVICES="${{ steps.set-manual-params.outputs.target_devices || steps.set-build-params.outputs.target_devices }}"
          if [ "$DEVICES" == "all" ]; then
            DEVICES="munch,lmi,umi,psyche,thyme,cmi,cas,apollo,alioth,elish,enuma,dagu,pipa"
          fi
          DEVICES_JSON="[\"$(echo $DEVICES | sed 's/,/\",\"/g')\"]"
          echo "matrix={\"device\":$DEVICES_JSON}" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.prepare.outputs.matrix)}}
      fail-fast: false
    env:
      CCACHE_COMPILERCHECK: "%compiler% -dumpmachine; %compiler% -dumpversion"
      CCACHE_NOHASHDIR: "true"
      CCACHE_HARDLINK: "true"
      
      # 使用准备好的参数
      TARGET_SYSTEM: ${{ needs.prepare.outputs.system_version || 'miui' }}
      KERNELSU_VER: ${{ needs.prepare.outputs.kernelsu_version || 'ksu' }}
      ADD_FUNC: ${{ needs.prepare.outputs.additional_function || 'no' }}
      KSU_META: ${{ needs.prepare.outputs.KSU_META || 'susfs-main/Numbersf' }}

    steps:
      - uses: actions/checkout@v4
      
      - name: Install Dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y build-essential git curl wget bison flex zip bc cpio libssl-dev libncurses-dev gcc python3 python3-pip ccache

      - name: Clean workspace
        run: |
          rm -rf out/ AnyKernel3*.zip Kernel_*.zip
          ccache -C
          rm -rf *.o *.mod *.order *.symvers *.cmd
          rm -rf toolchain/proton-clang
          echo "Cleaned workspace"

      - name: Cache Proton Clang
        uses: actions/cache@v4
        id: clang-cache
        with:
          path: toolchain/proton-clang
          key: ${{ runner.os }}-proton-clang-20210522

      - name: Download Toolchain
        if: steps.clang-cache.outputs.cache-hit != 'true'
        run: |
          mkdir -p toolchain
          cd toolchain
          wget https://github.com/kdrag0n/proton-clang/archive/refs/tags/20210522.zip
          unzip 20210522.zip
          mv proton-clang-20210522 proton-clang
          rm proton-clang/bin/ld 20210522.zip

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ccache_mikernel
          key: ${{ runner.os }}-ccache-${{ matrix.device }}-${{ github.sha }}
          restore-keys: ${{ runner.os }}-ccache-${{ matrix.device }}-

      # 添加SukiSU Ultra支持
      - name: Add SukiSU Ultra
        if: ${{ env.KERNELSU_VER == 'sukisu-ultra' }}
        run: |
          META="${{ env.KSU_META }}"
          BRANCH_NAME="${META%%/*}"
          CUSTOM_TAG="${META#*/}"
          echo "分支名: $BRANCH_NAME"
          echo "自定义版本标识: $CUSTOM_TAG"

          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s "$BRANCH_NAME"
          cd ./KernelSU

          KSU_API_VERSION=$(curl -fsSL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/Makefile" | \
            grep -m1 "KSU_VERSION_API :=" | awk -F'= ' '{print $2}' | tr -d '[:space:]')
          [[ -z "$KSU_API_VERSION" ]] && KSU_API_VERSION="3.1.8"

          echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV

          KSU_VERSION_FULL="v$KSU_API_VERSION-$CUSTOM_TAG@$BRANCH_NAME"
          echo "KSU_VERSION_FULL=$KSU_VERSION_FULL" >> $GITHUB_ENV

          sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
          sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile

          echo "KSU_VERSION_API := $KSU_API_VERSION" >> kernel/Makefile
          echo "KSU_VERSION_FULL := $KSU_VERSION_FULL" >> kernel/Makefile

          KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV

          echo "::group:: 最终 Makefile 中版本信息预览"
          grep -A5 "KSU_VERSION_API" kernel/Makefile
          echo "::endgroup::"
          cd ..

      - name: Build Kernel
        env:
          KSU_VERSION_FULL: ${{ env.KSU_VERSION_FULL }}
        run: |
          sed -i "s|TOOLCHAIN_PATH=\$HOME/toolchain/proton-clang/bin|TOOLCHAIN_PATH=$(pwd)/toolchain/proton-clang/bin|" build.sh
          bash build.sh "${{ matrix.device }}" \
            "${{ env.KERNELSU_VER }}" \
            "${{ env.ADD_FUNC }}" \
            "${{ env.TARGET_SYSTEM }}"

      - name: Generate Device Name Mapping
        id: device_mapping
        run: |
          declare -A device_map=(
            ["psyche"]="Mi12X" ["thyme"]="Mi10S" ["umi"]="Mi10" ["munch"]="K40S"
            ["lmi"]="K30Pro" ["cmi"]="Mi10Pro" ["cas"]="Mi10Ultra" ["apollo"]="Mi10T-K30SUltra"
            ["alioth"]="Mi11X-K40" ["elish"]="XiaomiPad5Pro" ["enuma"]="XiaomiPad5Pro5G"
            ["dagu"]="XiaomiPad5Pro12.4" ["pipa"]="XiaomiPad6"
          )
          DEVICE="${{ matrix.device }}"
          echo "device_name=${device_map[$DEVICE]}" >> $GITHUB_OUTPUT
          echo "DEVICE_NAME=${device_map[$DEVICE]}" >> $GITHUB_ENV

      - name: Find and Rename Kernel ZIP
        run: |
          ZIP_FILE=$(find . -name "Kernel_*_${{ matrix.device }}_*.zip" -print -quit)
          if [ -z "$ZIP_FILE" ]; then
            ZIP_FILE=$(find . -name "AnyKernel3_${{ matrix.device }}*.zip" -print -quit)
          fi
          if [ -z "$ZIP_FILE" ]; then
            echo "::error::No kernel file found for ${{ matrix.device }}!"
            exit 1
          fi
          DEVICE_NAME="${{ env.DEVICE_NAME }}"
          NEW_NAME="AnyKernel3-$DEVICE_NAME.zip"
          mv "$ZIP_FILE" "$NEW_NAME"
          echo "ZIP_PATH=$(pwd)/$NEW_NAME" >> $GITHUB_ENV

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.DEVICE_NAME }}
          path: ${{ env.ZIP_PATH }}

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Prepare Release Files
        run: |
          mkdir release
          find artifacts -name '*.zip' -exec cp {} release \;
          
      - name: Set Release Info
        id: release_info
        run: |
          DEVICE_NAMES=$(ls release | cut -d'-' -f1 | sort -u | tr '\n' ',' | sed 's/,$//')
          echo "device_names=$DEVICE_NAMES" >> $GITHUB_OUTPUT
          
          # 获取构建参数
          if [ "${{ github.event_name }}" == "schedule" ]; then
            SYSTEM_VERSION="miui"
            KERNELSU_VERSION="sukisu-ultra"
            ADDITIONAL_FUNCTION="susfs-kpm"
          else
            SYSTEM_VERSION="${{ github.event.inputs.system_version || 'miui' }}"
            KERNELSU_VERSION="${{ github.event.inputs.kernelsu_version || 'ksu' }}"
            ADDITIONAL_FUNCTION="${{ github.event.inputs.additional_function || 'no' }}"
          fi
          
          echo "RELEASE_BODY=## Kernel Build\n- **Devices:** $DEVICE_NAMES\n- **System:** $SYSTEM_VERSION\n- **KernelSU:** $KERNELSU_VERSION\n- **Additional:** $ADDITIONAL_FUNCTION\n- **Build Date:** $(date +%Y-%m-%d)" >> $GITHUB_ENV

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: AnyKernel3_${{ steps.release_info.outputs.device_names }}
          tag_name: kernel-${{ github.run_id }}
          body: ${{ env.RELEASE_BODY }}
          files: release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Clean workspace
        if: ${{ always() }}
        run: |
          rm -rf artifacts release
          echo "Cleaned workspace after release"
